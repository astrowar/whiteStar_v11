#include "cl.hpp"

#include "stdafx.h"
#include <iostream>
#include <vector>
#include <memory>
#include <algorithm>
#include <complex>

#define real double
int maxWorkGroupSize = 256;
size_t maxThreadsSize = 256;
cl::CommandQueue queue;


 


std::string load_file(const std::string& file_name, size_t max_size = 0x100000)
{
	FILE* fp = fopen(file_name.c_str(), "rb");
	if (!fp)
	{
		// print some error or throw exception here
		return std::string();
	}
	char* source = new char[max_size];
	memset(source, 0, max_size);
	size_t source_size = fread(source, 1, max_size, fp);
	fclose(fp);
	if (!source_size)
	{
		delete[] source;
		// print some error or throw exception here
		return std::string();
	}
	std::string result(source);
	delete[] source;
	return result;
}

cl::Context getContext()
{
	std::vector<cl::Platform> platforms;
	auto err = cl::Platform::get(&platforms);
	printf("number of platforms: %d\n", platforms.size());
	if (platforms.size() == 0)
	{
		printf("Platform size 0\n");
	}

	cl_context_properties properties[] = {CL_CONTEXT_PLATFORM, reinterpret_cast<cl_context_properties>((platforms[0])()), 0};
	return cl::Context(CL_DEVICE_TYPE_GPU, properties);
}

cl::Program build_Program(cl::Context context,int modal )
{
	auto devices = context.getInfo<CL_CONTEXT_DEVICES>();

	printf("number of devices %d\n", devices.size());
	devices[0];

	//devices[0].getInfo(CL_DEVICE_VENDOR, &maxWorkGroupSize);
	maxWorkGroupSize = 256;
	printf("number of max work items size  %d\n", maxWorkGroupSize);

	maxThreadsSize = 1;
	devices[0].getInfo(CL_DEVICE_MAX_WORK_GROUP_SIZE, &maxThreadsSize);
	printf("number of max processors  %d\n", maxThreadsSize);

	std::string extensions;
	devices[0].getInfo(CL_DEVICE_EXTENSIONS, &extensions);
	std::cout << extensions << std::endl;


	const char* pcode = R"V(
  kernel void vectorAdd(global const int *inputA, global const int *inputB, global int *output ,    const int x)
  {
     output[get_global_id(0)] = inputA[get_global_id(0)]+ inputB[get_global_id(0)] + x  ;
  }		;

 )V";

	std::string fullSource = load_file("modalKernel.cl");

	cl::Program vectorWrapper(context, cl::STRING_CLASS(fullSource.c_str()), false);


	std::vector<cl::Program> programs;

	std::string c_flags = "-D HASCL";
	if (modal >= 1) c_flags = c_flags + " -D MODAL1 ";
	if (modal >= 2) c_flags = c_flags + " -D MODAL2 ";
	if (modal >= 3) c_flags = c_flags + " -D MODAL3 ";

	cl_int err_compile = vectorWrapper.compile(c_flags.c_str());

	if (err_compile != CL_SUCCESS)
	{
		printf("done building program\n");
		std::cout << "Build Status: " << vectorWrapper.getBuildInfo<CL_PROGRAM_BUILD_STATUS>(devices[0]) << std::endl;
		std::cout << "Build Options:\t" << vectorWrapper.getBuildInfo<CL_PROGRAM_BUILD_OPTIONS>(devices[0]) << std::endl;
		std::cout << "Build Log:\t " << vectorWrapper.getBuildInfo<CL_PROGRAM_BUILD_LOG>(devices[0]) << std::endl;
		return cl::Program();
	}


	programs.push_back(vectorWrapper);
	cl::Program gpuProgram = cl::linkProgram(programs);

	printf("done building program\n");
	cl_build_status link_status = gpuProgram.getBuildInfo<CL_PROGRAM_BUILD_STATUS>(devices[0]);
	if (link_status != CL_SUCCESS)
	{
		std::cout << "Build Status: " << gpuProgram.getBuildInfo<CL_PROGRAM_BUILD_STATUS>(devices[0]) << std::endl;
		std::cout << "Build Options:\t" << gpuProgram.getBuildInfo<CL_PROGRAM_BUILD_OPTIONS>(devices[0]) << std::endl;
		std::cout << "Build Log:\t " << gpuProgram.getBuildInfo<CL_PROGRAM_BUILD_LOG>(devices[0]) << std::endl;
		return cl::Program();
	}

	printf("Build Program\n");
	cl_int err;
	// queue = cl::CommandQueue(context, devices[0], CL_QUEUE_PROFILING_ENABLE, &err);
	queue = cl::CommandQueue(context, devices[0], 0, &err);

	return gpuProgram;
}


struct ModalParameterIc
{
	real a, x, s;
};

struct ModalParameter
{
	ModalParameterIc p[4];
	real result;
};


real gaussian(real  x, real x0, real sigma)
{
	if (fabs(x - x0) < sigma * 6) return (1.0 / (sqrt(2.0 * 3.1415928* sigma*sigma))) * exp(-0.5*pow((x - x0) / sigma, 2.0));
	return 0.0;

}


real np_(real  uu, ModalParameter mp, const int modal_order)
{
	double result = 0.0;
	//if ((a + gg)>1) return 1e-40;
	if (modal_order >= 0) result += mp.p[0].a * gaussian(uu, mp.p[0].x, mp.p[0].s);
	if (modal_order >= 1) result += mp.p[1].a * gaussian(uu, mp.p[1].x, mp.p[1].s);
	if (modal_order >= 2) result += mp.p[2].a * gaussian(uu, mp.p[2].x, mp.p[2].s);
	if (modal_order >= 3) result += mp.p[3].a * gaussian(uu, mp.p[3].x, mp.p[3].s);
	return 1e-12 + result;
}


std::vector<double> massM = {0.15064,0.16697,0.15262,0.56734,0.15152 ,0.16219 ,0.15074 ,0.52799 ,0.15089 ,0.15201 ,0.15217 ,0.15939 ,0.15116 ,0.15290 ,0.15224 ,0.15170 ,0.15080 ,0.14502 ,0.17113, 0.15186,0.56184 ,0.15088 ,0.35076 ,0.15132 ,0.15059 ,0.15263 ,0.15072 ,0.15088 ,0.15103 ,0.15254 ,0.55817 ,0.34825 ,0.17726 ,0.15110 ,0.16299 ,0.18150 ,0.17127 ,0.15108 ,0.87744 ,0.15100,0.15309 ,0.15078 ,0.15135 ,0.15079 ,0.15027 ,0.15124, 0.17093 ,0.15062 ,0.15156 ,0.15121 ,0.15038 ,0.17704 ,0.15172 ,0.15122 ,0.16341 ,0.31370 ,0.15119 ,0.15325 ,0.15345 ,0.15055,0.17109 ,0.17093 ,0.15226 ,0.15279 ,0.17114 ,0.15117 ,0.15110 ,0.17118 ,0.15205 ,0.15049 ,0.14531 ,0.15056 ,0.15116 ,0.15033 ,0.14744 ,0.15267 ,0.17111 ,0.533080,0.16228 ,
	0.17348,0.15286 ,0.15040 ,0.15643 ,0.15050 ,0.17147 ,0.17393 ,0.15198 ,0.16308 ,0.15167 ,0.15047 ,0.14656 ,0.15027 ,0.15089 ,0.15112 ,0.15367 ,0.15034 ,0.17122 ,0.56720, 0.15135,0.16164,0.15059 ,0.61160 ,0.16166 ,0.15079 ,0.50445 ,0.18788 ,0.15867 ,0.15185 ,0.17130 ,0.17810 ,0.14529 ,0.15337 ,0.15183 ,0.15466 ,0.15153 ,0.14487 ,0.15158 ,0.17133 ,0.15103 ,0.17093,0.15101 ,0.17645 ,0.17105 ,0.15072 ,0.17116 ,0.17173 ,0.15166 ,0.15088 ,0.18150 ,0.16143 ,0.17649 ,0.15238 ,0.15067 ,0.15062 ,0.15067 ,0.15034 ,0.15110 ,0.14159 ,0.14507 ,0.14543,0.15331 ,0.14601 ,0.17222 ,0.15101 ,0.17146 ,0.14514 ,0.16187 ,0.15095 ,0.14526 ,0.14538 ,0.15073 ,0.15071 ,0.15044 ,0.15131 ,0.16329 ,0.1503 ,0.15048 ,0.15047 ,0.15119 ,0.15308,0.17197 ,0.15091 ,0.15275 ,0.15215 ,0.15046 ,0.54531 ,0.17745 ,0.59097 ,0.15188 ,0.15506 ,0.15576 ,0.15085 ,0.15184 ,0.15135 ,0.14500 ,0.15173 ,0.17108 ,0.16171 ,0.15135,0.15191,0.15488 ,0.14882 ,0.15134 ,0.15141 ,0.15066 ,0.17664 ,0.15126 ,0.15030 ,0.15166 ,0.14651 ,0.39500 ,0.15528 ,0.15262 ,0.15058 ,0.16289 ,0.1775 ,0.14517 ,0.17821 ,0.15052,0.14502,0.19449 ,0.15583 ,0.15161 ,0.15121 ,0.15224 ,0.15144 ,0.16148 ,0.15648 ,0.44609 ,0.15207 ,0.14721 ,0.15106 ,0.15333 ,0.14612 ,0.15308 ,0.1504 ,0.15342 ,0.15456 ,0.15036 ,0.14550,0.14511 ,0.17825 ,0.15160 ,0.15076 ,0.15472 ,0.15660 ,0.16409 ,0.15113 ,0.15510 ,0.16256 ,0.17127 ,0.15198 ,0.15046 ,0.15482 ,0.15386 ,0.15041, 0.17433 ,0.14492 ,0.15155 ,0.14499,0.17683 ,0.17124 ,0.15340 ,0.35675 ,0.15080 ,0.15035 ,0.15094 ,0.17368 ,0.15122 ,0.14548 ,0.15301 ,0.15087 ,0.15386 ,0.15041 ,0.15188 ,0.15050 ,0.17816 ,0.15533 ,0.14636 ,0.15591,0.17422 ,0.15082 ,0.42089 ,0.16235 ,0.16454 ,0.15092 ,0.14631 ,0.15205 ,0.17181 ,0.15079 ,0.15277 ,0.17752 ,0.16154 ,0.15114 ,0.17117 ,0.17461 ,0.15036 ,0.17721 ,0.15052 ,0.15079,0.15203 ,0.15048 ,0.15114 ,0.15359 ,0.15357 ,0.15275 ,0.17762 ,0.15046 ,0.15050 ,0.17072 ,0.17963 ,0.18012 ,0.14512 ,0.16483 ,0.15195 ,0.15050 ,0.39307 ,0.15100 ,0.14482 ,0.16358,0.15426 ,0.16188 ,0.15082 ,0.15300 ,0.14630 ,0.17117 ,0.15225 ,0.15275 ,0.15203 ,0.15104 ,0.15058 ,0.17316 ,0.14551 ,0.15214 ,0.15153 ,0.15135 ,0.16461 ,0.34888 ,0.47974 ,0.15090,0.17288 ,0.16193 ,0.15443 ,0.17913 ,0.15274 ,0.15128 ,0.15104 ,0.15096 ,0.15459 ,0.17171 ,0.17693 ,0.62881 ,0.14524 ,0.15035 ,0.17816 ,0.15412 ,0.62887 ,0.15130 ,0.36453 ,0.17191,0.17255 ,0.15088 ,0.15048 ,0.16987 ,0.15223 ,0.16262 ,0.16159 ,0.15027 ,0.15091 ,0.15151 ,0.17291 ,0.15326 ,0.15218 ,0.15180 ,0.15133 ,0.15244 ,0.15199 ,0.15036 ,0.15054 ,0.15134,0.15171 ,0.15120 ,0.15038 ,0.15287 ,0.15094 ,0.14512 ,0.15486 ,0.21899 ,0.14636 ,0.15187 ,0.15062 ,0.15245 ,0.14596 ,0.15298 ,0.17285 ,0.15114 ,0.15055 ,0.16143 ,0.17095 ,0.15119,0.15086 ,0.15093 ,0.15086 ,0.16281 ,0.17109 ,0.15308 ,0.17129 ,0.15215 ,0.15115 ,0.15085,0.14564 ,0.14546 ,0.15043 ,0.15372 ,0.15280 ,0.15075 ,0.14586 ,0.15122 ,0.15076 ,0.15200,0.15332 ,0.15232 ,0.15109 ,0.15300 ,0.14565 ,0.15160 ,0.15161 ,0.15626 ,0.14507 ,0.17116 ,0.15145 ,0.15168 ,0.18056 ,0.14481 ,0.19240 ,0.14657 ,0.14487 ,0.15063 ,1.06124 ,0.15075,0.15148 ,0.15166 ,0.14531 ,0.15164 ,0.15166 ,0.14525 ,0.15317 ,0.16474 ,0.15165 ,0.15413 ,0.17158 ,0.15063 ,0.15101 ,0.17124 ,0.14606 ,0.15061 ,0.15163 ,0.15070 ,0.15055 ,0.14503,0.14525 ,0.17145 ,0.15050 ,0.15246 ,0.14485 ,0.15068 ,0.17114 ,0.15211 ,0.15282 ,0.14969 ,0.48978 ,0.15032 ,0.14506 ,0.15099 ,0.14532 ,0.17756 ,0.15172 ,0.15113 ,0.17139 ,0.15174,0.16149 ,0.17193 ,0.15059 ,0.14479 ,0.15401 ,0.15920 ,0.15035 ,0.15127 ,0.15513 ,0.17123 ,0.16229 ,0.14515 ,0.15116 ,0.15055 ,0.14507 ,0.15123 ,0.58156 ,0.14515 ,0.15144 ,0.15386,0.15101 ,0.15243 ,0.15048 ,0.16405 ,0.17706 ,0.15447 ,0.15169 ,0.14541 ,0.15048 ,0.14650 ,0.14633 ,0.15125 ,0.15113 ,0.15053 ,0.15161 ,0.17378 ,0.17177 ,0.14505 ,0.15114 ,0.14591,0.16231 ,0.15043 ,0.15024 ,0.15170 ,0.15295 ,0.15050 ,0.15057 ,0.15028 ,0.59689 ,0.15041 ,0.15047 ,0.14552 ,0.15028 ,0.52459 ,0.14520 ,0.14504 ,0.15028 ,0.15035 ,0.15182 ,0.15162,0.15228 ,0.15481 ,0.19962 ,0.17126 ,0.15457 ,0.15080 ,0.15175 ,0.15738 ,0.15059 ,0.15319 ,0.15032 ,0.52294 ,0.15081 ,0.15025 ,0.15042 ,0.15218 ,0.15077 ,0.14537 ,0.15044 ,0.15283,0.15043 ,0.15079 ,0.14506 ,0.15039 ,0.15044 ,0.14512 ,0.15082 ,0.16001 ,0.15163 ,0.15109 ,0.15086 ,0.15100 ,0.15055 ,0.15047 ,0.15199 ,0.15874 ,0.17266 ,0.48930 ,0.14491 ,0.15096, 0.17240 ,0.15220 ,0.15064 ,0.14615 ,0.15041 ,0.15131 ,0.17096 ,0.15051 ,0.14717 ,0.14489 ,0.15269 ,0.15024 ,0.52355 ,0.17254 ,0.15130 ,0.15768 ,0.15032 ,0.15032 ,0.66192 ,0.14480, 0.15056 ,0.15117 ,0.16154 ,0.15089 ,0.14503 ,0.15025 ,0.15078 ,0.14526 ,0.15100 ,0.14604 ,0.27228 ,0.15138 ,0.14690 ,0.14517 ,0.15363 ,0.15048 ,0.14778 ,0.15115 ,0.14499 ,0.14492, 0.15079 ,0.14595 ,0.15163 ,0.15127 ,0.15104 ,0.26187 ,0.15129 ,0.15294 ,0.14591 ,0.55446 ,0.14501 ,0.15299 ,0.56696 ,0.57639 ,0.17236 ,0.14590 ,0.15116 ,0.14530 ,0.71698 ,0.14503, 0.15097 ,0.59071 ,0.14504 ,0.15297 ,0.15073 ,0.15031 ,0.15072 ,0.15152 ,0.59824 ,0.14505 ,0.14822 ,0.17095 ,0.14482 ,0.17706 ,0.58695 ,0.17172 ,0.54989 ,0.54791 ,0.54223 ,0.15078, 0.15124 ,0.15057 ,0.15107 ,0.14505 ,0.15351 ,0.15116 ,0.14673 ,0.14486 ,0.54920 ,0.15131 ,0.15134 ,0.16035 ,0.15062 ,0.17157 ,0.15192 ,0.15392 ,0.39365 ,0.15172 ,0.14557 ,0.14579, 0.16350 ,0.17252 ,0.17150 ,0.14649 ,0.15280 ,0.15374 ,0.18000 ,0.14509 ,0.15083 ,0.15054 ,0.15265 ,0.14610 ,0.16286 ,0.15381 ,0.17175 ,0.15090 ,0.16271 ,0.15054 ,0.17097 ,0.15162 ,0.15290 ,0.14643 ,0.15169 ,0.15267 ,0.17344 ,0.14485 ,0.17154 ,0.17152 ,0.15368 ,0.55576 ,0.15341 ,0.15230 ,0.15260 ,0.15068 ,0.14511 ,0.14488 ,0.15104 ,0.15122 ,0.15605 ,0.15248 ,0.15046 ,0.15078 ,0.15284 ,0.54678 ,0.15076 ,0.15182 ,0.15032 ,0.15072 ,0.15292 ,0.14515 ,0.15097 ,0.15196 ,0.14616 ,0.14522 ,0.15105 ,0.15198 ,0.15045 ,0.16225 ,0.16161 ,0.15107 ,0.17664 ,0.17738 ,0.15375 ,0.16233 ,0.17873 ,0.15341 ,0.16167 ,0.14503 ,0.14499 ,0.15103 ,0.15080 ,0.40789 ,0.15031 ,0.15107 ,0.16163 ,0.14487 ,0.15167 ,0.14674 ,0.15049 ,0.16685 ,0.15714 ,0.29878 ,0.32659 ,1.27266 ,0.15189 ,0.32558 ,0.16204 ,0.17770 ,0.15184 ,0.15155 ,0.15320 ,0.15104 ,0.16458 ,0.15079 ,0.14493 ,0.15200 ,0.14486 ,0.22826 ,0.15122 ,0.14481 ,0.17218 ,0.15181 ,0.15430 ,0.14836 ,0.15917 ,0.15204 ,0.15114 ,0.15046 ,0.14602 ,0.15236 ,0.15461 ,0.15440 ,0.15033 ,0.14530 ,0.15180 ,0.17645 ,0.15264 ,0.15758 ,0.15097 ,0.15098 ,0.15155 ,0.49045 ,0.17696 ,0.17105 ,0.14816 ,0.14513 ,0.17410 ,0.17120 ,0.15090 ,0.17191 ,0.16441 ,0.15126 ,0.15399 ,0.57369 ,0.17320 ,0.15060 ,0.14857 ,0.15443 ,0.61351 ,0.14519, 0.15178 ,0.15469 ,0.14523 ,0.15047 ,0.17739 ,0.61855 ,0.15069 ,0.17410 ,0.15161 ,0.15084 ,0.15378 ,0.16218 ,0.17110 ,0.14480 ,0.14498 ,0.61034 ,0.15088 ,0.52335 ,0.15275 ,0.15152, 0.14483 ,0.15079 ,0.52191 ,0.41255 ,0.52332 ,0.14528 ,0.14619 ,0.52839 ,0.15052 ,0.14680 ,0.14544 ,0.17647 ,0.14489 ,0.14481 ,0.48595 ,0.15149 ,0.15293 ,0.15150 ,0.15046 ,0.14505, 0.56196 ,0.15111 ,0.15134 ,0.17141 ,1.27009 ,0.15047 ,0.17101 ,0.15069 ,0.15085 ,0.47250 ,0.14721 ,0.14592 ,0.26688 ,0.15121 ,0.52157 ,0.55998 ,0.53322 ,0.17219 ,0.15269 ,0.15129, 0.17742 ,0.17116 ,0.14494 ,0.14499 ,0.17666 ,0.15044 ,0.50532 ,0.14595 ,0.15172 ,0.15041 ,0.15138 ,0.15058 ,0.15071 ,0.15109 ,0.14510 ,0.15127 ,0.16351 ,0.15215 ,0.15080 ,0.17729, 0.16232 ,0.15066 ,0.17762 ,0.14603 ,0.14500 ,0.15402 ,0.15140 ,0.17742 ,0.76134 ,0.15215 ,0.15025 ,0.15078 ,0.15118 ,0.14788 ,0.15165 ,0.15063 ,0.15166 ,0.15045 ,0.15476 ,0.14865, 0.14542 ,0.14626 ,0.15061 ,0.15159 ,0.15058 ,0.15065 ,0.15178 ,0.15226 ,0.14606 ,0.59837 ,0.52369 ,0.15207 ,0.54825 ,0.57351 ,0.60073 ,0.57534 ,0.59080 ,0.14732 ,0.15233 ,0.15371, 0.17659 ,0.66181 ,0.14559 ,0.17195 ,0.14488 ,0.15375 ,0.14505 ,0.17142 ,0.15269 ,0.15232 ,0.15527 ,0.15036 ,0.16452 ,0.36270 ,0.14610 ,0.14484 ,0.14612 ,0.65705 ,0.15167 ,0.15186, 0.14485 ,0.15552 ,0.17940 ,0.15107 ,0.60843 ,0.60637 ,0.15424 ,0.15718 ,0.15104 ,0.15064 ,0.15347 ,0.14496 ,0.14507 ,0.14611 ,0.14514 ,0.15043 ,0.17681 ,0.34881 ,0.16465 ,0.15064, 0.14479 ,0.14602 ,0.17250 ,0.17096 ,0.14487 ,0.14525 ,0.15606 ,0.15181 ,0.48174 ,0.26624 ,0.18096 ,0.14627 ,0.16346 ,0.17142 ,0.16395 ,0.17107 ,0.14820 ,0.15492 ,0.15059 ,0.14691, 0.15171 ,0.18235 ,0.14482 ,0.15999 ,0.17133 ,0.52203 ,0.15040 ,0.14480 ,0.15479 ,0.15297 ,0.15066 ,0.15338 ,0.65712 ,0.15257 ,0.15058 ,0.24639 ,0.15043 ,0.14477 ,0.14520 ,0.16805, 0.15546 ,0.17811 ,0.14499 ,0.15034 ,0.14614 ,0.15180 ,0.14542 ,0.15042 ,0.14492 ,0.32767 ,0.15215 ,0.17840 ,0.15050 ,0.15143 ,0.17114 ,0.15094 ,0.15170 ,0.15076 ,0.15443 ,0.15041, 0.58779 ,0.14671 ,0.14509 ,0.15378 ,0.14510 ,0.15252 ,0.15187 ,0.15083 ,0.14570 ,0.14515 ,0.14621 ,0.15106 ,0.17287 ,0.66658 ,0.60981 ,0.59910 ,0.16193 ,0.15192 ,0.14614 ,0.50395, 0.25550 ,0.52446 ,0.14485 ,0.17739 ,0.15033 ,0.15049 ,0.14580 ,0.14485 ,0.15043 ,0.14572 ,0.14510 ,0.15098 ,0.14501 ,0.15155 ,0.15031 ,0.15100 ,0.15089 ,0.15071 ,0.15294 ,0.54654, 0.15217 ,0.15527 ,0.15183 ,0.15109 ,0.15727 ,0.15048 ,0.15091 ,0.62753 ,0.14829 ,0.58540 ,0.58645 ,0.14860 ,0.17861 ,0.14508 ,0.15122 ,0.51049 ,0.15062 ,0.14491 ,0.52471 ,1.18898, 0.14585 ,0.15154 ,0.15108 ,0.14504 ,0.15811 ,0.17689 ,0.17288 ,0.15074 ,0.17731 ,0.15044 ,0.58459 ,0.17748 ,0.14482 ,0.14632 ,0.15304 ,0.15073 ,0.17799 ,0.14501 ,0.15085 ,0.15383, 0.15406 ,0.14510 ,0.15256 ,0.15058 ,0.17705 ,0.15070 ,0.52456 ,0.14599 ,0.17659 ,0.71166 ,0.15073 ,0.18577 ,0.14799 ,0.15074 ,0.15053 ,0.15118 ,0.14498 ,0.52204 ,0.15063 ,0.17644, 0.15058 ,0.17665 ,0.14697 ,0.16262 ,0.15072 ,0.14574 ,0.14521 ,0.14616 ,0.15241 ,0.17504 ,0.16159 ,0.14495 ,0.15318 ,0.14606 ,0.58132 ,0.14673 ,0.15194 ,0.14532 ,0.15082 ,0.15326, 0.15088 ,0.14676 ,0.55214 ,0.15104 ,0.15204 ,0.15138 ,0.15075 ,0.15043 ,0.15070 ,0.14653 ,0.15122 ,0.17691 ,0.15612 ,0.15111 ,0.15452 ,0.15053 ,0.15469 ,0.15391 ,0.14673 ,0.14624, 0.14617 ,0.15221 ,0.16147 ,0.17767 * 0.15128 ,0.16383 ,0.14486 ,0.14513 ,0.15150 ,0.17342 ,0.14506 ,0.16866 ,0.52536 ,0.14621 ,0.14522 ,0.15309 ,0.78306 ,0.16191 ,0.15176 ,0.62485, 0.15266 ,0.15142 ,0.14617 ,0.15084 ,0.15331 ,0.15480 ,0.14937 ,0.15239 ,0.15191 ,0.14672 ,0.15508 ,0.14549 ,0.14681 ,0.15245 ,0.14513 ,0.18304 ,0.15393 ,0.15167 ,0.17101 ,0.17205, 0.14740 ,0.17645 ,0.49159 ,0.15227 ,0.77497 ,0.17762 ,0.44773 ,0.14687 ,0.17288 ,0.15113 ,0.16167 ,0.14499 ,0.14497 ,0.18117 ,0.15175 ,0.14626 ,0.15111 ,0.17657 ,0.17164 ,0.14497, 0.15110 ,0.14486 ,0.15101 ,0.15089 ,0.15061 ,0.14507 ,0.15092 ,0.16342 ,0.17342 ,0.14525 ,0.15061 ,0.17672 ,0.15166 ,0.15135 ,0.17125 ,0.15152 ,0.16163 ,0.15153 ,0.15309 ,0.38097, 0.15585 ,0.15195 ,0.17706 ,0.16155 ,0.15053 ,0.14514 ,0.15848 ,0.15161 ,0.15132 ,0.33266 ,0.14479 ,0.15068 ,0.15065 ,0.15307 ,0.15184 ,0.17252 ,0.15118 ,0.15243 ,0.14555 ,0.17094, 0.15506 ,0.16745 ,0.14597 ,0.60277 ,0.15087 ,0.14584 ,0.15134 ,0.14479 ,0.15268 ,0.68486 ,0.15053 ,0.17791 ,0.14601 ,0.15079 ,0.56776 ,0.14535 ,0.14491 ,0.14645 ,0.15458 ,0.60847, 0.15082 ,0.45544 ,0.15103 ,0.15534 ,0.15100 ,0.15058 ,0.14516 ,0.66776 ,0.15082 ,0.66461 ,0.59858 ,0.18074 ,0.15168 ,0.17135 ,0.15168 ,0.51540 ,0.15381 ,0.15100 ,0.14497 ,0.45633, 0.15046 ,0.14865 ,0.14618 ,0.15043 ,0.14512 ,0.14489 ,0.14606 ,0.15391 ,0.14502 ,0.14531 ,0.14612 ,0.14760 ,0.14534 ,0.14601 ,0.14552 ,0.15111 ,0.15112 ,0.15108 ,0.74319 ,0.15118, 0.15092 ,0.15525 ,0.17268 ,0.15124 ,0.15054 ,0.57521 ,0.15187 ,0.15760 ,0.17820 ,0.17558 ,0.15137 ,0.15146 ,0.17655 ,0.82559 ,1.10240 ,0.43209 ,0.17128 ,0.45949 ,0.15112 ,0.14505, 0.15050 ,0.14590 ,0.15170 ,0.17664 ,0.14590 ,0.17109 ,0.14482 ,0.17122 ,0.15178 ,0.17704 ,0.15059 ,0.62355 ,0.15091 ,0.56053 ,0.17173 ,0.17096 ,0.17097 ,0.14479 ,0.15283 ,0.15122, 0.14507 ,0.60996 ,0.17115 ,0.14594 ,0.14604 ,0.15073 ,0.66251 ,0.14618 ,0.56882 ,0.17117 ,0.15158 ,0.68279 ,0.17106 ,0.15150 ,0.14621 ,0.15028 ,0.17299 ,0.15049 ,0.17138 ,0.14507, 0.17126 ,0.54664 ,0.45302 ,0.15345 ,0.14649 ,0.14583 ,0.14524 ,0.15171 ,0.52185 ,0.14488 ,0.14557 ,0.17115 ,0.17129 ,0.14485 ,0.15099 ,0.15171 ,0.14612 ,0.15133 ,0.15197 ,0.15155, 0.15238 ,0.14500 ,0.15215 ,0.15080 ,0.14597 ,0.15358 ,0.15073 ,0.15070 ,0.15059 ,0.15163 ,0.15091 ,0.14489 ,0.14511 ,0.15158 ,0.14527 ,0.17691 ,0.15520 ,0.15106 ,0.14603 ,0.15113, 0.15048 ,0.14675 ,0.14877 ,0.15474 ,0.17762 ,0.14734 ,0.15168 ,0.52958 ,0.15919 ,0.14628 ,0.14534 ,0.15109 ,0.17709 ,0.15318 ,0.14492 ,0.14555 ,0.15187 ,0.14487 ,0.15033 ,0.17130, 0.14489 ,0.14506 ,0.17110 ,0.15049 ,0.17680 ,0.15130 ,0.17645 ,0.17725 ,0.14487 ,0.14539 ,0.16471 ,0.15186 ,0.14553 ,0.14517 ,0.15548 ,0.15030 ,0.14508 ,0.17116 ,0.15048 ,0.15066, 0.15135 ,0.15057 ,0.14486 ,0.14524 ,0.14628 ,0.15126 ,0.15342 ,0.17196 ,0.15301 ,0.14516 ,0.43841 ,0.15024 ,0.14486 ,0.15263 ,0.17171 ,0.15101 ,0.14491 ,0.14515 ,0.15164 ,0.15146, 0.15024 ,0.15104 ,0.15073 ,0.14538 ,0.15147 ,0.66144 ,0.15039 ,0.14506 ,0.14492 ,0.14482 ,0.15112 ,0.14520 ,0.49899 ,0.14623 ,0.15047 ,0.17762 ,0.14639 ,0.15160 ,0.14618 ,0.17745, 0.14512 ,0.14519 ,0.15216 ,0.15151 ,0.15083 ,0.15112 ,0.17119 ,0.16241 ,0.17749 ,0.62358 ,0.16227 ,0.14623 ,0.14499 ,0.14487 ,0.14487 ,0.17170 ,0.15076 ,0.14663 ,0.14621 ,0.15088, 0.17679 ,0.18123 ,0.15122 ,0.14635 ,0.14504 ,0.15050 ,0.52417 ,0.14575 ,0.14520 ,0.15294 ,0.15299 ,0.75567 ,0.14578 ,0.15068 ,0.14609 ,0.15032 ,0.14488 ,0.17166 ,0.15078 ,0.15057, 0.14503 ,0.15172 ,0.15061 ,0.14492 ,0.14709 ,0.14579 ,0.15041 ,0.14484 ,0.14533 ,0.14494 ,0.14511 ,0.14604 ,0.15151 ,0.15166 ,0.15303 ,0.17166 ,0.14516 ,0.15027 ,0.15255 ,0.14542, 0.15176 ,0.14533 ,0.15153 ,0.14607 ,0.14505 ,0.14503 ,0.14485 ,0.14504 ,0.14549 ,0.17131 ,0.14481 ,0.52264 ,0.14521 ,0.15151 ,0.14905 ,0.15094 ,0.15082 ,0.14484 ,0.14645 ,0.14519, 0.14536 ,0.15214 ,0.15085 ,0.15095 ,0.15359 ,0.14487 ,0.14494 ,0.14489 ,0.14512 ,0.67333 ,0.15048 ,0.14558 ,0.14481 ,0.14496 ,0.14490 ,0.14633 ,0.14587 ,0.15133 ,0.15078 ,0.15349, 0.17955 ,0.15140 ,0.14497 ,0.19525 ,0.15114 ,0.17693 ,0.15244 ,0.14502 ,0.65405 ,0.15153 ,0.16632 ,0.14633 ,0.53158 ,0.14852 ,0.15445 ,0.14544 ,0.14488 ,0.14506 ,0.20715 ,0.14548, 0.17141 ,0.14540 ,0.15148 ,0.17094 ,0.15443 ,0.17272 ,0.15050 ,0.15065 ,0.14587 ,0.16179 ,0.15113 ,0.15276 ,0.17116 ,0.24056 ,0.56442 ,0.16446 ,0.15134 ,0.15028 ,0.54991 ,0.14520, 0.13936 ,0.15319 ,0.15077 ,0.14501 ,0.15070 ,0.15045 ,0.20060 ,0.15063 ,0.15124 ,0.33750 ,0.81511 ,0.15039 ,0.15491 ,0.15131 ,0.14553 ,0.14603 ,0.56666 ,0.17666 ,0.15091 ,0.15106, 0.17126 ,0.17675 ,0.15101 ,0.14734 ,0.15029 ,0.14511 ,0.16236 ,0.15088 ,0.16219 ,0.15131 ,0.14782 ,0.17102 ,0.17109 ,0.15248 ,0.17915 ,0.15042 ,0.52416 ,0.15051 ,0.61102 ,0.48566, 0.17591 ,0.17667 ,0.17739 ,0.17659 ,0.16163 ,0.53067 ,0.14510 ,0.15250 ,0.17365 ,0.17907 ,0.15050 ,0.14649 ,0.15047 ,0.15065 ,0.15039 ,0.71448 ,0.14518 ,0.17121 ,0.17715 ,0.14611, 0.14899 ,0.14523 ,0.15161 ,0.14480 ,0.14610 ,0.15255 ,0.54946 ,0.14493 ,0.15334 ,0.14526 ,0.15091 ,0.15113 ,0.14489 ,0.58451 ,0.60646 ,0.14633 ,0.14491 ,0.15196 ,0.14545 ,0.14493, 0.57367 ,0.16860 ,0.14500 ,0.15118 ,0.17666 ,0.17724 ,0.61037 ,0.15302 ,0.15344 ,0.17191 ,0.14612 ,0.15260 ,0.14490 ,0.15059 ,0.16162 ,0.14505 ,0.16720 ,0.15071 ,0.15070 ,0.14616, 0.14596 ,0.15173 ,0.15032 ,0.15105 ,0.15397 ,0.14613 ,0.15773 ,0.73758 ,0.16761 ,0.15066 ,0.14506 ,0.15062 ,0.15072 ,0.14634 ,0.17252 ,0.15178 ,0.17680 ,0.52931 ,0.17633 ,0.15141, 0.44977 ,0.16148 ,0.15378 ,0.14701 ,0.14510 ,0.13962 ,0.14591 ,0.15425 ,0.14487 ,0.14507 ,0.14516 ,0.15106 ,0.17097 ,0.15139 ,0.15342 ,0.14546 ,0.14923 ,0.14580 ,0.15429 ,0.15087, 0.14524 ,0.17142 ,0.15177 ,0.14787 ,0.14583 ,0.15296 ,0.15064 ,0.14640 ,0.14649 ,0.14746 ,0.59420 ,0.14495 ,0.64284 ,0.17231 ,0.15310 ,0.14511 ,0.17205 ,0.14821 ,0.15032 ,0.69520, 0.15149 ,0.16466 ,0.59880 ,0.15062 ,0.15032 ,0.14622 ,0.14809 ,0.14508 ,0.43581 ,0.14512 ,0.14572 ,0.14507 ,0.42529 ,0.14524 ,0.55927 ,0.15478 ,0.17755 ,0.15041 ,0.15328 ,0.61712, 0.17054 ,0.15139 ,0.15165 ,0.14493 ,0.15575 ,0.15223 ,0.16234 ,0.15041 ,0.17292 ,0.15096 ,0.15060 ,0.15067 ,0.15052 ,0.16157 ,0.14481 ,0.14510 ,0.67158 ,0.15068 ,0.15124 ,0.15144, 0.15128 ,0.54028 ,0.14821 ,0.24451 ,0.15061 ,0.15166 ,0.17273 ,0.14529 ,0.15151 ,0.15060 ,0.16303 ,0.57326 ,0.15164 ,0.14485 ,0.14599 ,0.16332 ,0.14514 ,0.14485 ,0.17119 ,0.14628, 0.56225 ,0.17118 ,0.15097 ,0.58344 ,0.14517 ,0.36019 ,0.44827 ,0.19294 ,0.15169 ,0.17711 ,0.17656 ,0.16281 ,0.15040 ,0.15120 ,0.15072 ,0.15093 ,0.15331 ,0.15236 ,0.14623 ,0.15157, 0.17288 ,0.15051 ,0.14499 ,0.65544 ,0.15292 ,0.15126 ,0.17515 ,0.17742 ,0.15215 ,0.17669 ,0.16236 ,0.15358 ,0.17701 ,0.14606 ,0.15379 ,0.15060 ,0.14479 ,0.17870 ,0.17113 ,0.14487 ,0.14854 ,0.14512 ,0.17862 ,0.14628 ,0.15063 ,0.17205 ,0.15464 ,0.15144 ,0.14531 ,0.14510 ,0.14556 ,0.14581 ,0.15035 ,0.14489 ,0.14522 ,0.15278 ,0.14548 ,0.15352 ,0.14491 ,0.14577, 0.14504 ,0.15154 ,0.14616 ,0.16143 ,0.14560 ,0.14522 ,0.15081 ,0.14471 ,0.14582 ,0.14615 ,0.15246 ,0.15096 ,0.14522 ,0.17119 ,0.15041 ,0.14499 ,0.14610 ,0.14480 ,0.14511 ,0.17645, 0.15087 ,0.14517 ,0.14672 ,0.49516 ,0.39507 ,0.17820 ,0.15117 ,0.14554 ,0.15122 ,0.15063 ,0.14508 ,0.14563 ,0.17249 ,0.14509 ,0.14685 ,0.15095 ,0.15095 ,0.14513 ,0.15210 ,0.12000, 0.14558 ,0.15110 ,0.14561 ,0.14637 ,0.14534 ,0.14499 ,0.14618 ,0.14612 ,0.14626 ,0.14624 ,0.14850 ,0.15312 ,0.15108 ,0.14484 ,0.14554 ,0.14515 ,0.14622 ,0.14473 ,0.14826 ,0.15136, 0.14615 ,0.14526 ,0.14494 ,0.14483 ,0.17647 ,0.14496 ,0.14507 ,0.17271 ,0.15341 ,0.17166 ,0.14499 ,0.15160 ,0.16159 ,0.14669 ,0.15075 ,0.14649 ,0.15066 ,0.14868 ,0.14626 ,0.15113, 0.15283 ,0.14548 ,0.14565 ,0.52208 ,0.14485 ,0.14486 ,0.14575 ,0.14499 ,0.14502 ,0.14513 ,0.14496 ,0.15177 ,0.14583 ,0.54451 ,0.17145 ,0.15470 ,0.14481 ,0.14528 ,0.14547 ,0.14675, 0.17101 ,0.55706 ,0.15007 ,0.14607 ,0.15183 ,0.14632 ,0.14601 ,0.14450 ,0.17846 ,0.15123 ,0.15149 ,0.14620 ,0.14567 ,0.14508 ,0.14509 ,0.14515 ,0.19566 ,0.17099 ,0.64414 ,0.14485, 0.14501 ,0.14487 ,0.14578 ,0.19831 ,0.14590 ,0.14510 ,0.17749 ,0.14928 ,0.14532 ,0.15165 ,0.14512 ,0.14485 ,0.15297 ,0.14476 ,0.15115 ,0.16316 ,0.14451 ,0.16413 ,0.14482 ,0.17181, 0.15114 ,0.15097 ,0.14513 ,0.15137 ,0.15248 ,0.15440 ,0.15253 ,0.17923 ,0.14489 ,0.15118 ,0.66757 ,0.14491 ,0.14533 ,0.17653 ,0.16879 ,0.15038 ,0.14618 ,0.14489 ,0.15170 ,0.15047, 0.17167 ,0.17168 ,0.15074 ,0.15145 ,0.15181 ,0.15277 ,0.17133 ,0.15074 ,0.15128 ,0.15114 ,0.17240 ,0.15390 ,0.15330 ,0.14504 ,0.17397 ,0.14656 ,0.15321 ,0.44879 ,0.14534 ,0.17737, 0.15278 ,0.14864 ,0.14507 ,0.14588 ,0.15260 ,0.17097 ,0.15139 ,0.14483 ,0.14571 ,0.14618 ,0.14489 ,0.18060 ,0.41989 ,0.14486 ,0.15314 ,0.15174 ,0.16408 ,0.14661 ,0.14892 ,0.14591, 0.15292 ,0.42548 ,0.16468 ,0.16143 ,0.31460 ,0.17665 ,0.17115 ,0.14651 ,0.14515 ,0.14516 ,0.14633 ,0.14552 ,0.17134 ,0.14651 ,0.16235 ,0.15048 ,0.49739 ,0.14565 ,0.45237 ,0.15061, 0.14500 ,0.14525 ,0.15964 ,0.15122 ,0.15070 ,0.15305 ,0.15105 ,0.14509 ,0.15357 ,0.14502 ,0.54071 ,0.15161 ,0.15235 ,0.14491 ,0.15183 ,0.76007 ,0.15609 ,0.15386 ,0.15110 ,0.16380, 0.15122 ,0.17736 ,0.15046 ,0.66588 ,0.15149 ,0.15119 ,0.14498 ,0.15079 ,0.15221 ,0.14639 ,0.15679 ,0.15141 ,0.15087 ,0.24592 ,0.16359 ,0.15139 ,0.15157 ,0.15081 ,0.14641 ,0.14719, 0.15097 ,0.15034 ,0.17838 ,0.15211 ,0.14622 ,0.15732 ,0.44943 ,0.61863 ,0.15088 ,0.15061 ,0.15171 ,0.15054 ,0.15223 ,0.14512 ,0.48442 ,0.67135 ,0.17209 ,0.29730 ,0.15038 ,0.77273, 0.15177 ,0.15640 ,0.18067 ,0.15472 ,0.15050 ,0.14483 ,0.17856 ,0.15269 ,0.35176 ,0.66789 ,0.52878 ,0.17927 ,0.15147 ,0.14511 ,0.14734 ,0.14661 ,0.64149 ,0.15027 ,0.14653 ,0.15067, 0.15176 ,0.16989 ,0.14554 ,0.14507 ,0.17755 ,0.15380 ,0.59905 ,0.15220 ,0.14521 ,0.15050 ,0.15153 ,0.15320 ,0.15719 ,0.16255 ,0.14768 ,0.17200 ,0.15126 ,0.14495 ,0.16435 ,0.17450, 0.17099 ,0.14543 ,0.15172 ,0.16367 ,0.14500 ,0.14668 ,0.15083 ,0.15144 ,0.17694 ,0.15176 ,0.14531 ,0.15211 ,0.17219 ,0.18377 ,0.15042 ,0.17799 ,0.17119 ,0.14504 ,0.14486 ,0.15243, 0.15628 ,0.17728 ,0.15203 ,0.14681 ,0.16422 ,0.14575 ,0.14649 ,0.14484 ,0.14543 ,0.15255 ,0.15511 ,0.14494 ,0.15219 ,0.59985 ,0.17668 ,0.17274 ,0.17696 ,0.15059 ,0.15326 ,0.14505, 0.15433 ,0.15029 ,0.17183 ,0.15063 ,0.15062 ,0.15059 ,0.14517 ,0.15318 ,0.14488 ,0.15099 ,0.16156 ,0.17379 ,0.15453 ,0.14490 ,0.15039 ,0.15371 ,0.14510 ,0.15386 ,0.15115 ,0.15053, 0.73596 ,0.16378 ,0.16971 ,0.15187 ,0.15054 ,0.14507 ,0.15454 ,0.17752 ,0.15117 ,0.15268 ,0.15264 ,0.16058 ,0.15032 ,0.15050 ,0.15050 ,0.15341 ,0.14516 ,0.15144 ,0.15083 ,0.66437, 0.15660 ,0.15119 ,0.14487 ,0.15223 ,0.15726 ,0.15401 ,0.17102 ,0.55958 ,0.16169 ,0.59423 ,0.15139 ,0.14604 ,0.14511 ,0.15194 ,0.66481 ,0.15203 ,0.14511 ,0.15218 ,0.15214 ,0.52395, 0.15033 ,0.15124 ,0.14537 ,0.95178 ,0.14612 ,0.57036 ,0.16214 ,0.38881 ,0.17745 ,0.15342 ,0.14607 ,0.14628 ,0.16342 ,0.15039 ,0.17145 ,0.55595 ,0.15257 ,0.15097 ,0.55916 ,0.17669, 0.15034 ,0.15073 ,0.16445 ,0.17742 ,0.61291 ,0.64878 ,0.49379 ,0.70791 ,0.14513 ,0.16806 ,0.14494 ,0.14519 ,0.16417 ,0.14525 ,0.17213 ,0.14585 ,0.15327 ,0.15163 ,0.14489 ,0.16720, 0.26984 ,0.45829 ,0.59614 ,0.15140 ,0.15335 ,0.15192 ,0.16463 ,0.14493 ,0.14736 ,0.14895 ,0.45792 ,0.16348 ,0.14512 ,0.14578 ,0.14598 ,0.14528 ,0.66896 ,0.15063 ,0.15044 ,0.14471 ,0.14483 ,0.15416 ,0.14492 ,0.45990 ,0.15290 ,0.15295 ,0.14669 ,0.15475 ,0.53761 ,0.15108 ,0.66373 ,0.15053 ,0.15055 ,0.15105 ,0.61611 ,0.15127 ,0.15082 ,0.15960 ,0.15482 ,0.14514, 0.62567 ,0.14657 ,0.14684 ,0.16230 ,0.16239 ,0.15223 ,0.15077 ,0.15265 ,0.17163 ,0.45040 ,0.17092 ,0.15095 ,0.53064 ,0.15053 ,0.15050 ,0.14504 ,0.17935 ,0.52447 ,0.14486 ,0.52256, 0.54370 ,0.15130 ,0.14499 , 0.00000 ,0.45571 ,0.66163 ,0.14607 ,0.17028 ,0.25158 ,0.14457 ,0.14637 ,0.15289 ,0.15166 ,0.14554 ,0.14515 ,0.36733 ,0.15158 ,0.42771 ,0.14487 ,0.14530, 0.15123 ,0.14481 ,0.14581 ,0.15081 ,0.15025 ,0.46258 ,0.14571 ,0.56721 ,0.60654 ,0.45816 ,0.15441 ,0.14504 ,0.15075 ,0.14507 ,0.15043 ,0.17765 ,0.15274 ,0.15118 ,0.15192 ,0.14520, 0.14651 ,0.15233 ,0.15044 ,0.15070 ,0.17358 ,0.59339 ,0.15141 ,0.16343 ,0.15915 ,0.14506 ,0.16190 ,0.15259 ,0.15375 ,0.17833 ,0.15052 ,0.15032 ,0.17109 ,0.18035 ,0.16479 ,0.15243, 0.15426 ,0.14509 ,0.57752 ,0.13949 ,0.15035 ,0.14497 ,0.14793 ,0.15063 ,0.15134 ,0.16180 ,0.15072 ,0.15104 ,0.17671 ,0.15079 ,0.15301 ,0.14510 ,0.15038 ,0.15031 ,0.15083 ,0.17243, 0.15184 ,0.17651 ,0.15265 ,0.15071 ,0.15210 ,0.14631 ,0.17667 ,0.15578 ,0.15226 ,0.15191 ,0.14526 ,0.15055 ,0.14678 ,0.15079 ,0.14815 ,0.14504 ,0.17109 ,0.17241 ,0.15214 ,0.18000, 0.14611 ,0.14512 ,0.14511 ,0.15039 ,0.15109 ,0.14506 ,0.15341 ,0.16398 ,0.17147 ,0.15077 ,0.17100 ,0.15256 ,0.15165 ,0.17173 ,0.16239 ,0.15198 ,0.14524 ,0.15174 ,0.14500 ,0.15110, 0.15105 ,0.15031 ,0.63515 ,0.60757 ,0.14741 ,0.66167 ,0.15990 ,0.57365 ,0.17268 ,0.15156 ,0.17258 ,0.17683 ,0.14513 ,0.15579 ,0.15111 ,0.48981 ,0.87034 ,0.15197 ,0.53268 ,0.15138, 0.14543 ,0.53368 ,0.17678 ,0.31763 ,0.55755 ,0.15051 ,0.15088 ,0.16719 ,0.17111 ,0.14551 ,0.48077 ,0.15091 ,0.15104 ,0.17377 ,0.17163 ,0.17748 ,0.15218 ,0.15094 ,0.52332 ,0.15058, 0.14664 ,0.15154 ,0.15088 ,0.17108 ,0.15115 ,0.14523 ,0.14476 ,0.14495 ,0.15049 ,0.17370 ,0.15378 ,0.15236 ,0.16109 ,0.14521 ,0.14658 ,0.14562 ,0.15186 ,0.15208 ,0.15305 ,0.14505, 0.17723 ,0.14845 ,0.48336 ,0.15060 ,0.17662 ,0.38795 ,0.16206 ,0.14935 ,0.14662 ,0.15147 ,0.15111 ,0.15098 ,0.15088 ,0.17449 ,0.16640 ,0.15041 ,0.15031 ,0.14486 ,0.15278 ,0.17148, 0.15088 ,0.17321 ,0.17116 ,0.14532 ,0.15129 ,0.17938 ,0.17896 ,0.14492 ,0.17751 ,0.16354 ,0.17705 ,0.15396 ,0.16233 ,0.17742 ,0.17292 ,0.15215 ,0.14657 ,0.14545 ,0.15067 ,0.17096, 0.14498 ,0.15064 ,0.16994 ,0.15078 ,0.17110 ,0.14507 ,0.17101 ,0.14730 ,0.16189 ,0.14494 ,0.15095 ,0.15053 ,0.15034 ,0.15342 ,0.15061 ,0.15066 ,0.15077 ,0.17096 ,0.17664 ,0.17140, 0.14519 ,0.15086 ,0.15051 ,0.15255 ,0.15442 ,0.17121 ,0.15045 ,0.17099 ,0.17110 ,0.15051 ,0.14690 ,0.18067 ,0.14795 ,0.17698 ,0.15172 ,0.17727 ,0.15196 ,0.56156 ,0.14478 ,0.14615, 0.15235 ,0.17643 ,0.15247 ,0.15107 ,0.17217 ,0.17715 ,0.15153 ,0.14618 ,0.14482 ,0.14490 ,0.14610 ,0.16189 ,0.14536 ,0.52511 ,0.15083 ,0.15082 ,0.15432 ,0.17691 ,0.17675 ,0.14609, 0.17777 ,0.17195 ,0.15045 ,0.15079 ,0.17129 ,0.15091 ,0.15034 ,0.17202 ,0.15139 ,0.14491 ,0.15066, 0.17164 ,0.14491 ,0.17159 ,0.15067 ,0.17321 ,0.59732 ,0.14489 ,0.15127 ,0.15315, 0.15375 ,0.17725 ,0.15158 ,0.14529 ,0.14482 ,0.15057 ,0.15101 ,0.14521 ,0.15104 ,0.17654 ,0.17120 ,0.62958 ,0.15039 ,0.17672 ,0.15044 ,0.17096 ,0.15040 ,0.15083 ,0.15048 ,0.15372, 0.14651 ,0.17783};


std::vector<double> sigmaM = {0.00037,0.00855,0.00079,0.01063,0.00092,0.00470,0.00052,0.01308,0.00017,0.00021,0.00075,0.00766,0.00073,0.00126,0.00113,0.00105,0.00025,0.00050,0.00006,0.00020, 0.00544,0.00041,0.04402,0.00054,0.00011,0.00097,0.00033,0.00009,0.00031,0.00530,0.01182,0.05082,0.00015,0.00034,0.01099,0.05300,0.00468,0.00064,0.04521,0.00031,0.00529,0.00049,0.00040,0.00010,0.00021,0.00040,0.00019,0.00029,0.00048,0.00060,0.00046,0.00032,0.00039,0.00048,0.00532,0.03596,0.00021,0.00133,0.00033,0.00032,0.00279,0.00016,0.00139,0.00155,
	0.00051,0.00036,0.00044,0.00024,0.00055,0.00034,0.00025,0.00034,0.00042,0.00043,0.00165,0.00061,0.00892,0.03319,0.00838,0.00120,0.00088,0.00007,0.00475,0.00010,0.00033,0.00098,
	0.00109,0.00063,0.00100,0.00022,0.00132,0.00013,0.00021,0.00065,0.00135,0.00025,0.00474,0.01176,0.00028,0.00523,0.00029,0.01808,0.00481,0.00236,0.01823,0.01060,0.00692,0.00045,0.00015,0.00063,0.00058,0.00076,0.00092,0.00016,0.00022,0.00025,0.00560,0.00003,0.00058,0.00475,0.00058,0.00016,0.00007,0.00221,0.00012,0.00018,0.00052,0.00011,0.00500,0.01059,0.00271,0.00111,0.00031,0.00036,0.00033,0.00029,0.00021,0.05916,0.00072,0.00078,0.00033,0.00259,0.00466,0.00056,0.00018,0.00041,0.00476,0.00043,0.00043,0.00041,0.00013,0.00027,0.00023,0.00047,0.01151,0.00014,0.00073,0.00034,0.00033,0.00145,0.00277,0.00064,0.00543,0.00087,0.00063,0.01607,0.00224,0.01589,0.00069,0.00271,0.00389,0.00017,0.00036,0.00011,0.00040,0.00076,0.00279,0.00947,0.00023,0.00025,0.00178,0.00226,0.00038,0.00086,0.00020,0.00016,0.00113,0.00024,0.00083,0.00063,0.01985,0.00383,0.00047,0.00049,0.00501,0.00021,
	0.00039,0.00066,0.00039,0.00033,0.02431,0.00510,0.00054,0.00049,0.00066,0.00076,0.00009,0.00268,0.02537,0.00087,0.00294,0.00058,0.00079,0.00285,0.00186,0.00091,0.00183,0.00267,0.00015,0.00089,0.00026,0.00103,0.00046,0.00222,0.00396,0.00738,0.00789,0.00038,0.00379,0.00829,0.00013,0.00105,0.00032,0.00244,0.00093,0.00030,0.00151,0.00049,0.00099,0.00051,0.00031,0.00473,0.00085,0.05171,0.00037,0.00016,0.00072,0.00368,0.00068,0.00063,0.00151,0.00027,0.00367,0.00239,0.00105,0.00035,0.00400,0.00817,0.00106,0.00564,0.00062,0.00048,0.05386,0.00488,0.00338,0.00027,0.00032,0.00100,0.00055,0.00085,0.00157,0.00036,0.01007,0.00216,0.00021,0.00136,0.00249,0.00021,0.00044,0.00021,0.00000,0.00027,0.00000,0.00206,0.00219,0.00105,0.00013,0.00016,0.00025,0.00695,0.00137,0.00510,0.00071,0.00669,0.00058,0.00037,0.05458,0.00065,0.00026,0.00429,0.00051,0.00927,0.00023,0.00045,0.00038,0.00020,0.00517,0.00502,0.00042,0.00049,0.00041,0.00270,0.00293,0.00049,0.00030,0.00036,0.01198,0.06917,0.04528,0.00580,0.00084,0.00478,0.00867,0.01719,0.00076,0.00035,0.00028,0.00056,0.00333,0.00050,0.00034,0.02351,0.00053,0.00019,0.00046,0.00069,0.00000,0.00075,0.03862,0.00036,0.00271,0.00037,0.00082,0.00660,0.00069,0.00483,0.00017,0.00023,0.00022,0.00082,0.00063,0.00144,0.00102,0.00059,0.00050,0.00101,0.00049,0.00024,0.00050,0.00082,0.00066,0.00054,0.00062,0.00080,0.00057,0.00027,0.00250,0.02078,0.00033,0.00039,0.00055,0.00050,0.00050,0.00112,0.00072,0.00045,0.00018,0.00026,0.00931,0.00059,0.00049,0.00076,0.00050,0.00054,0.00021,0.00156, 0.00471,0.00080,0.00046,0.00036,0.00083,0.00072,0.00024,0.00199,0.00064,0.00220,0.00105,0.00074,0.00040,0.00214,0.00164,0.00125,0.00052,0.00180,0.00080,0.00113,0.00061,0.00263,0.00038,0.00464,0.00065,0.00106,0.01164,0.00024,0.01685,0.00160,0.00006,0.00044,0.00000,0.00027,0.00053,0.00108,0.00052,0.00059,0.00547,0.00269,0.00528,0.00549,0.00150,0.00201,0.00285,0.00049,0.00559,0.00274,0.00282,0.00061,0.00032,0.00024,0.00032,0.00043,0.00047,0.00037,0.00039,0.00068,0.00051,0.00037,0.00474,0.00087,0.00125,0.00220,0.00500,0.00068,0.00065,0.00043,0.00086,0.00052,0.00077,0.00024,0.00028,0.00043,0.00011,0.00283,0.00039,0.00028,0.00267,0.00777,0.00069,0.00031,0.00284,0.00285,0.00481,0.00062,0.00043,0.00071,0.00291,0.00088,0.01988,0.00291,0.00543,0.00904,0.00054,0.00151,0.00036,0.00237,0.00024,0.00334,0.00134,0.00070,0.00029,0.00124,0.00122,0.00041,0.00069,0.00048,0.00082,0.00101,0.00468,0.00055,0.00071,0.00085,0.00850,0.00238,0.00023,0.00097,0.00163,0.00040,0.00237,0.00025,0.03439,0.00031,0.00044,0.00068,0.00254,0.00427,0.00279,0.00066,0.00043,0.00037,0.00074,0.00086,0.00078,0.00531,0.02632,0.00031,0.00263,0.00050,0.00113,0.00801,0.00053,0.00136,0.00051,0.00411,0.00030,0.00028,0.00040,0.00107,0.00052,0.00076,0.00016,0.00137,0.00023,0.00054,0.00047,0.00027,0.00064,0.00060,0.00042,0.00657,0.00050,0.00068,0.00036,0.00033,0.00025,0.00035,0.00104,0.00904,0.00268,0.06292,0.00063,0.00034,0.00089,0.00131,0.00043,0.00067,0.00051,0.00073,0.00008,0.00052,0.00289,0.00051,0.00146,0.00460,0.00126,0.00092,0.00098,0.00621,0.00056,0.00047,0.04918,0.00038,0.00021,0.00223,0.00031,0.00062,0.00053,0.00029,0.00015,0.00071,0.00062,0.00081,0.01200,0.00099,0.00092,0.00282,0.00652,0.00048,0.00272,0.00071,0.00061,0.00044,0.00059,0.00126,0.00082,0.00076,0.00066,0.25634,0.00065,0.00152,0.00095,0.00000,0.00050,0.00522,0.02675,0.01200,0.00269,0.00130,0.00075,0.00076,0.04762,0.00034,0.00063,0.00000,0.00034,0.00126,0.00068,0.00012,0.00050,0.00121,0.00000,0.00021,0.00088,0.00926,0.00029,0.00038,0.01203,0.00037,0.01588,0.04012,0.00000,0.00225,0.00042,0.00015,0.00060,0.00032,0.00084,0.00072,0.00162,0.00027,0.03179,0.00041,0.00058,0.00632,0.00039,0.00464,0.00090,0.00134,0.03185,0.00120,0.00103,0.00063,0.00082,0.00076,0.00472,0.00092,0.00143,0.00127,0.00500,0.00031,0.00067,0.00034,0.00129,0.00132,0.00494,0.00906,0.00276,0.00070,0.00975,0.00052,0.00007,0.00039,0.00055,0.00063,0.00121,0.00096,0.00255,0.00014,0.00013,0.00471,0.00177,0.05110,0.00510,0.00133,0.00046,0.00475,0.00271,0.00014,0.00066,0.00072,0.00536,0.00117,0.00024,0.00040,0.00131,0.01009,0.00067,0.00048,0.00260,0.00051,0.00146,0.00281,0.00067,0.00084,0.00075,0.00018,0.00020,0.00091,0.00031,0.00888,0.00956,0.00056,0.01399,0.00066,0.00499,0.00433,0.00114,0.00162,0.00481,0.00043,0.00064,0.00030,0.00041,0.04420,0.00050,0.00066,0.00016,0.00057,0.00164,0.00170,0.00069,0.00526,0.00383,0.02399,0.03825,0.08819,0.00131,0.02490,0.00484,0.00231,0.00051,0.00073,0.00108,0.00049,0.00779,0.00058,0.00050,0.00090,0.00025,0.02798,0.00108,0.00053,0.00075,0.00074,0.00213,0.00228,0.00721,0.00116,0.00228,0.00024,0.00062,0.00083,0.00276,0.00284,0.00043,0.00125,0.00088,0.00006,0.00114,0.00552,0.00033,0.00071,0.00070,0.02856,0.00016,0.00014,0.00231,0.00068,0.00279,0.00279,0.00045,0.00052,0.00247,0.00061,0.00327,0.02749,0.00459,0.00026,0.00313,0.00350,0.00000,0.00099,0.00104,0.00348,0.00049,0.00033,0.00006,0.02432,0.00030,0.00263,0.00141,0.00567,0.00130,0.00479,0.00012,0.00024,0.00058,0.03370,0.00031,0.00078,0.00090,0.00079,0.00058,0.00063,0.00653,0.05669,0.00000,0.00051,0.00061,0.00721,0.00038,0.00151,0.00085,0.00004,0.00038,0.00028,0.02136,0.00056,0.00111,0.00068,0.00041,0.00029,0.01160,0.00081,0.00079,0.00472,0.03765,0.00034,0.00026,0.00021,0.00023,0.01540,0.00196,0.00121,0.00701,0.00079,0.00322,0.01547,0.01222,0.00060,0.00140,0.00106,0.00005,0.00280,0.00017,0.00030,0.00018,0.00079,0.02089,0.00064,0.00071,0.00018,0.00035,0.00050,0.00234,0.00055,0.00049,0.00549,0.00601,0.00063,0.00033,0.00034,0.00430,0.00055,0.00010,0.00071,0.00047,0.00143,0.00068,0.00004,0.00000,0.00098,0.00040,0.00034,0.00061,0.00250,0.00078,0.00019,0.00080,0.00038,0.00388,0.00335,0.00066,0.00079,0.00050,0.00068,0.00026,0.00039,0.00095,0.00100,0.00276,0.02004,0.00366,0.00163,0.01334,0.01164,0.02442,0.02053,0.02640,0.00090,0.00123,0.00275,0.00259,0.04927,0.00000,0.00464,0.00025,0.00098,0.00035,0.00469,0.00144,0.00102,0.00390,0.00036,0.01063,0.03740,0.00058,0.00038,0.00084,0.00923,0.00075,0.00076,0.00034,0.00435,0.00104,0.00072,0.02510,0.04903,0.00322,0.00607,0.00050,0.00075,0.01380,0.00038,0.00070,0.00079,0.00033,0.00026,0.00021,0.00000,0.00338,0.00066,0.00030,0.00274,0.00095,0.00030,0.00052,0.00044,0.01384,0.00032,0.00948,0.02355,0.01525,0.00068,0.00522,0.00029,0.00486,0.00021,0.01492,0.00226,0.00041,0.00286,0.00070,0.01252,0.00029,0.00629,0.00033,0.00000,0.00022,0.00028,0.00156,0.00113,0.00044,0.00151,0.02954,0.00067,0.00072,0.01173,0.00020,0.00040,0.00048,0.00000,0.01003,0.00500,0.00049,0.00030,0.00067,0.00089,0.00092,0.00042,0.00066,0.04513,0.00144,0.00083,0.00057,0.00024,0.00019,0.00034,0.00050,0.00025,0.00440,0.00028,0.01614,0.00114,0.00048,0.00249,0.00104,0.00076,0.00115,0.00056,0.00070,0.00029,0.00153,0.00049,0.01020,0.06872,0.02191,0.01214,0.00481,0.00126,0.00266,0.00000,0.03942,0.01183,0.00032,0.00002,0.00032,0.00038,0.00110,0.00044,0.00032,0.00037,0.00028,0.00057,0.00020,0.00061,0.00018,0.00020,0.00024,0.00216,0.00160,0.00000,0.00552,0.00482,0.00066,0.00548,0.00737,0.00069,0.00029,0.02034,0.00273,0.03338,0.01942,0.01560,0.00091,0.00069,0.00037,0.01532,0.00025,0.00044,0.00822,0.05304,0.00140,0.00039,0.00058,0.00021,0.00574,0.00020,0.00458,0.00073,0.00232,0.00040,0.01572,0.00058,0.00047,0.00055,0.00145,0.00042,0.00055,0.00061,0.00040,0.00218,0.00287,0.00039,0.00092,0.00045,0.00246,0.00071,0.01462,0.00095,0.00264,0.05536,0.00062,0.01440,0.00107,0.00050,0.00044,0.00212,0.00036,0.00081,0.00240,0.00011,0.00029,0.00263,0.00125,0.00488,0.00023,0.00098,0.00272,0.00050,0.00000,0.00259,0.00016,0.00045,0.00134,0.00273,0.00000,0.00149,0.00099,0.00044,0.00071,0.00165,0.00054,0.00131,0.01511,0.00026,0.00071,0.00567,0.00041,0.00040,0.00560,0.00143,0.00051,0.00024,0.00484,0.00082,0.00278,0.00021,0.00857,0.00237,0.00126,0.00062,0.00255,0.00111,0.01035,0.00500,0.00066,0.00481,0.00030,0.00029,0.00051,0.00360,0.00090,0.01069,0.00864,0.00057,0.00000,0.00512,0.16397,0.00476,0.00127,0.01953,0.00123,0.00042,0.00275,0.00071,0.00207,0.00261,0.00385,0.00133,0.00125,0.00126,0.00498,0.00051,0.00104,0.00051,0.00017,0.02520,0.00338,0.00050,0.00008,0.00051,0.00106,0.01282,0.01251,0.00141,0.06513,0.00054,0.00770,0.00071,0.00067,0.00032,0.00519,0.00066,0.00027,0.00606,0.00097,0.00057,0.00041,0.00017,0.00029,0.00036,0.00068,0.00036,0.00059,0.00053,0.00055,0.00074,0.00053,0.00089,0.00124,0.00057,0.00019,0.01369,0.00547,0.00084,0.00029,0.00065,0.00480,0.00114,0.00165,0.03765,0.00534,0.00120,0.00968,0.00975,0.00015,0.00278,0.00611,0.00554,0.00554,0.04739,0.00034,0.00065,0.00207,0.00129,0.00097,0.00076,0.00540,0.00114,0.00069,0.00018,0.00316,0.00638,0.00069,0.02184,0.00044,0.00071,0.00084,0.00048,0.00090,0.00000,0.00024,0.00056,0.00081,0.00069,0.02041,0.00033,0.00029,0.00068,0.00859,0.02692,0.00046,0.01377,0.00039,0.00000,0.00000,0.00053,0.00051,0.01893,0.00033,0.03787,0.00000,0.00115,0.00132,0.00020,0.00104,0.05097,0.00091,0.00063,0.00027,0.01292,0.00026,0.00227,0.00068,0.00042,0.00043,0.00021,0.00262,0.00197,0.00039,0.00045,0.00066,0.00257,0.00073,0.00080,0.00033,0.00044,0.00228,0.00029,0.09431,0.00580,0.00027,0.00134,0.00057,0.00031,0.00051,0.01154,0.00046,0.00370,0.00500,0.00128,0.00174,0.00052,0.00012,0.05747,0.11328,0.01735,0.00008,0.00553,0.00230,0.00274,0.00241,0.00063,0.00051,0.00010,0.00077,0.00011,0.00015,0.00021,0.00050,0.00018,0.00038,0.02552,0.00071,0.01198,0.00268,0.00015,0.00006,0.00044,0.00134,0.00040,0.00043,0.04905,0.00468,0.00272,0.00272,0.00024,0.04904,0.00081,0.02582,0.00018,0.00045,0.04661,0.00277,0.00076,0.00261,0.00026,0.00060,0.00019,0.00469,0.00052,0.00016,0.01352,0.00375,0.00109,0.00156,0.00087,0.00032,0.00187,0.00057,0.00036,0.00077,0.00022,0.00030,0.00034,0.00027,0.00042,0.00065,0.00180,0.00148,0.00052,0.00139,0.00081,0.00108,0.00562,0.00279,0.00093,0.00068,0.00025,0.00022,0.00096,0.00067,0.00074,0.00038,0.00030,0.00055,0.00031,0.00383,0.00065,0.00267,0.00055,0.00038,0.00113,0.00345,0.00309,0.00005,0.00105,0.00080,0.00000,0.00566,0.00104,0.00040,0.00058,0.00253,0.00170,0.00055,0.00070,0.00050,0.00043,0.00045,0.00012,0.00044,0.00053,0.00009,0.00015,0.00263,0.00050,0.00015,0.00004,0.00032,0.00065,0.00122,0.00034,0.00079,0.00021,0.00453,0.00009,0.00033,0.00467,0.00066,0.00060,0.00107,0.00073,0.00020,0.00268,0.00264,0.00199,0.00074,0.00265,0.00124,0.00000,0.01227,0.00016,0.00044,0.00136,0.00036,0.00035,0.00044,0.00023,0.00205,0.00173,0.00475,0.00570,0.00017,0.00055,0.00071,0.01341,0.00037,0.00023,0.00046,0.00028,0.00228,0.00049,0.02240,0.00256,0.00029,0.00005,0.00066,0.00058,0.00098,0.00005,0.00021,0.00031,0.00062,0.00201,0.00225,0.00228,0.00026,0.00480,0.00013,0.01635,0.00471,0.00069,0.00025,0.00028,0.00016,0.00059,0.00035,0.00134,0.00052,0.00032,0.00024,0.00762,0.00047,0.00247,0.00044,0.00017,0.00240,0.00062,0.00022,0.00144,0.00120,0.07357,0.00124,0.00039,0.00266,0.00028,0.00028,0.00022,0.00212,0.00027,0.00048,0.00065,0.00560,0.00033,0.00127,0.00096,0.00023,0.00060,0.00038,0.00039,0.00271,0.00276,0.00068,0.00054,0.00145,0.00020,0.00056,0.00020,0.00131,0.00068,0.00047,0.00068,0.00052,0.00266,0.00283,0.00052,0.00044,0.00042,0.00032,0.00010,0.00015,0.00540,0.00267,0.00185,0.00279,0.00212,0.00228,0.00025,0.00132,0.00055,0.00054,0.00114,0.00069,0.00212,0.00076,0.00039,0.00049,0.00050,0.00021,0.02438,0.00039,0.00053,0.00039,0.00050,0.00041,0.00253,0.00126,0.00039,0.00055,0.00093,0.00118,0.00082,0.00046,0.01310,0.00223,0.00028,0.00116,0.00054,0.05584,0.00056,0.00625,0.00249,0.01544,0.00000,0.00483,0.00057,0.00047,0.00044,0.02623,0.00073,0.00277,0.00035,0.00181,0.00016,0.00868,0.00463,0.00042,0.00017,0.00053,0.00500,0.00228,0.00522,0.00468,0.00000,0.01169,0.01044,0.00080,0.00049,0.03187,0.00028,0.00089,0.00064,0.00054,0.00040,0.00033,0.00039,0.02023,0.00038,0.00041,0.04187,0.01137,0.00023,0.00467,0.00048,0.00293,0.00068,0.00872,0.00028,0.00045,0.00059,0.00022,0.00337,0.00058,0.00280,0.00052,0.00273,0.00436,0.00038,0.00885,0.00050,0.00240,0.00012,0.00011,0.00076,0.00300,0.00052,0.00374,0.00040,0.04254,0.02456,0.00877,0.00011,0.00048,0.00268,0.00506,0.03223,0.00014,0.00103,0.00104,0.00256,0.00030,0.00109,0.00037,0.00046,0.00023,0.04355,0.00271,0.00019,0.00500,0.00054,0.00283,0.00052,0.00084,0.00041,0.00060,0.00037,0.02787,0.00042,0.00251,0.00027,0.00558,0.00078,0.00029,0.01378,0.02076,0.00269,0.00031,0.00095,0.00072,0.00054,0.05703,0.00932,0.00039,0.00066,0.00008,0.00048,0.05684,0.00154,0.00128,0.00049,0.00050,0.00072,0.00035,0.00024,0.00521,0.00037,0.00586,0.00229,0.00047,0.00066,0.00069,0.00080,0.00245,0.00063,0.00225,0.00069,0.00312,0.06994,0.00947,0.00057,0.00036,0.00020,0.00076,0.00249,0.00067,0.00115,0.00264,0.05458,0.00374,0.00095,0.00385,0.00008,0.00303,0.00162,0.00057,0.00120,0.00124,0.00281,0.00030,0.00047,0.00031,0.00031,0.00915,0.00056,0.00168,0.00085,0.01537,0.00125,0.00319,0.00053,0.00038,0.00272,0.00114,0.00249,0.00076,0.00083,0.00034,0.00255,0.00069,0.00126,0.01256,0.00050,0.02908,0.00464,0.00144,0.00284,0.00467,0.00287,0.00025,0.03210,0.00060,0.00841,0.02008,0.00016,0.00012,0.00260,0.00249,0.00277,0.01021,0.00269,0.00111,0.00053,0.01410,0.00047,0.01599,0.00040,0.00005,0.00252,0.00186,0.00899,0.00787,0.00095,0.00054,0.00060,0.00719,0.00126,0.00876,0.00033,0.00454,0.00077,0.00560,0.00033,0.00044,0.00477,0.00000,0.00035,0.01893,0.00029,0.00054,0.00077,0.00061,0.00000,0.00232,0.01580,0.00070,0.00114,0.00272,0.00043,0.00087,0.00042,0.00486,0.02684,0.00064,0.00029,0.00288,0.00483,0.00052,0.00027,0.00013,0.00110,0.02595,0.00021,0.00075,0.01112,0.00051,0.04515,0.05206,0.01927,0.00188,0.00026,0.00029,0.00058,0.00020,0.00061,0.00031,0.00055,0.00096,0.00079,0.00075,0.00532,0.00465,0.00032,0.00286,0.05683,0.00143,0.00340,0.00203,0.00230,0.00166,0.00844,0.00481,0.00160,0.00017,0.00260,0.00213,0.00053,0.00013,0.00088,0.00017,0.00025,0.00000,0.00289,0.00103,0.00000,0.00035,0.00458,0.00530,0.00053,0.00050,0.00028,0.00060,0.00074,0.00052,0.00021,0.00015,0.00081,0.00074,0.00087,0.00038,0.00058,0.00052,0.00103,0.00115,0.00476,0.00078,0.00018,0.00020,0.00076,0.00097,0.00049,0.00056,0.00059,0.00033,0.00011,0.00025,0.00028,0.00271,0.00019,0.00023,0.00011,0.00064,0.00037,0.00107,0.01404,0.01093,0.05000,0.00000,0.00036,0.00037,0.00024,0.00016,0.00038,0.00079,0.00048,0.00400,0.00073,0.00557,0.00035,0.00148,0.00500,0.00000,0.00042,0.00061,0.00000,0.00040,0.00025,0.00050,0.00084,0.00037,0.00108,0.00154,0.00125,0.00070,0.00011,0.00038,0.00000,0.00051,0.00046,0.00287,0.00047,0.00098,0.00081,0.00040,0.00015,0.00009,0.00056,0.00032,0.00462,0.00119,0.00051,0.00043,0.00052,0.00441,0.00102,0.00066,0.00122,0.00071,0.01435,0.00063,0.00068,0.00108,0.00064,0.00089,0.00101,0.00009,0.00016,0.00067,0.00044,0.00037,0.00023,0.00040,0.00087,0.00000,0.03426,0.00016,0.00584,0.00015,0.00065,0.00082,0.00148,0.00010,0.04698,0.00040,0.00078,0.00087,0.00250,0.00086,0.00036,0.00063,0.00058,0.00173,0.00281,0.00083,0.00056,0.00288,0.00060,0.01467,0.00019,0.03128,0.00020,0.00028,0.00030,0.00000,0.02204,0.00113,0.00043,0.00011,0.00292,0.00000,0.00120,0.00040,0.00047,0.00126,0.00015,0.00071,0.00487,0.00025,0.00116,0.00023,0.00469,0.00034,0.00058,0.00055,0.00035,0.00087,0.00379,0.00097,0.00123,0.00054,0.00042,0.08715,0.00037,0.00081,0.00020,0.00000,0.00047,0.00100,0.00040,0.00080,0.00043,0.00054,0.00044,0.00058,0.00083,0.00536,0.00124,0.00017,0.00036,0.00045,0.00052,0.00467,0.00147,0.00182,0.00283,0.00160,0.00075,0.00094,0.01396,0.00067,0.00042,0.00104,0.01538,0.00064,0.00091,0.00052,0.00006,0.00077,0.00050,0.00067,0.00025,0.00030,0.01325,0.08740,0.00023,0.00166,0.00092,0.00708,0.00098,0.00204,0.00067,0.00182,0.07533,0.00661,0.00013,0.03967,0.00263,0.00016,0.00081,0.00014,0.00032,0.00043,0.00047,0.00034,0.00170,0.00479,0.00023,0.01338,0.00027,0.07375,0.00021,0.00026,0.00071,0.00230,0.00070,0.00031,0.00121,0.00052,0.00044,0.00141,0.00068,0.01920,0.00538,0.00103,0.00029,0.00124,0.07562,0.00485,0.00227,0.00042,0.00092,0.00030,0.00241,0.00012,0.06652,0.00064,0.00054,0.00030,0.00013,0.00538,0.00071,0.00267,0.00045,0.00036,0.01990,0.00524,0.00041,0.00095,0.00061,0.00271,0.00265,0.00234,0.00053,0.00216,0.00073,0.00047,0.00441,0.00527,0.01633,0.00055,0.00014,0.00094,0.00048,0.00081,0.00043,0.01480,0.03089,0.00465,0.03331,0.00035,0.05399,0.00099,0.00632,0.01695,0.00249,0.00021,0.00031,0.00500,0.00074,0.00985,0.02733,0.01089,0.00115,0.00058,0.00277,0.00272,0.00121,0.02450,0.00259,0.00142,0.00044,0.00067,0.00821,0.00086,0.00061,0.00054,0.00100,0.05018,0.00098,0.00264,0.00049,0.00102,0.00934,0.00499,0.00388,0.00166,0.00056,0.00060,0.00053,0.00818,0.00263,0.00027,0.00042,0.00081,0.00505,0.00047,0.00092,0.00561,0.00062,0.00023,0.00098,0.00046,0.00132,0.00468,0.01847,0.00023,0.00068,0.00013,0.00037,0.00015,0.00129,0.01065,0.00004,0.00069,0.00110,0.00739,0.00045,0.00158,0.00029,0.00083,0.00140,0.00000,0.00067,0.00144,0.00752,0.00257,0.00084,0.00031,0.00043,0.00000,0.00279,0.00343,0.00050,0.00467,0.00237,0.00052,0.00039,0.00042,0.00118,0.00040,0.00018,0.00971,0.00148,0.00109,0.00030,0.00033,0.00316,0.00049,0.00129,0.00049,0.00055,0.03685,0.00122,0.00891,0.00081,0.00033,0.00033,0.00094,0.00007,0.00561,0.00108,0.00133,0.00728,0.00022,0.00036,0.00054,0.00109,0.00015,0.00072,0.00028,0.03631,0.01376,0.00046,0.00042,0.00120,0.01161,0.00889,0.00008,0.03286,0.00945,0.01437,0.00052,0.00084,0.00277,0.00099,0.02771,0.00174,0.00053,0.00110,0.00086,0.00000,0.00021,0.00048,0.00027,0.00000,0.00104,0.01441,0.00443,0.00560,0.00012,0.00108,0.00097,0.00150,0.00512,0.00028,0.00039,0.01137,0.00077,0.00063,0.01216,0.01273,0.00060,0.00051,0.00301,0.00011,0.01287,0.05828,0.00819,0.02933,0.00020,0.00952,0.00037,0.00042,0.00128,0.00031,0.00061,0.00079,0.00165,0.00112,0.00014,0.00688,0.04104,0.01089,0.03435,0.00082,0.00573,0.00116,0.00540,0.00032,0.01525,0.00190,0.00801,0.00069,0.00022,0.00054,0.00105,0.00041,0.03145,0.00208,0.00028,0.00036,0.00022,0.00236,0.00037,0.00730,0.00102,0.00160,0.00107,0.00350,0.01628,0.00050,0.06350,0.00031,0.00054,0.00209,0.02552,0.00048,0.00028,0.00000,0.00407,0.00275,0.03171,0.00108,0.00071,0.00400,0.00497,0.00145,0.00083,0.00111,0.00017,0.01256,0.00942,0.00064,0.01476,0.00050,0.00000,0.00029,0.01215,0.00214,0.00029,0.00998,0.01469,0.00053,0.00058,0.18454,0.00528,0.02413,0.00253,0.01160,0.02632,0.00042,0.00000,0.00103,0.00085,0.00025,0.00053,0.05753,0.00049,0.02937,0.00079,0.00019,0.00090,0.00031,0.00053,0.00055,0.00045,0.00000,0.00066,0.00462,0.01442,0.00835,0.01435,0.00088,0.00047,0.00062,0.00023,0.00020,0.00626,0.00078,0.00092,0.00271,0.00111,0.00098,0.00063,0.00028,0.00266,0.00867,0.00069,0.00174,0.00724,0.00074,0.00017,0.00094,0.00099,0.01828,0.00028,0.00015,0.00901,0.00319,0.00559,0.00120,0.00423,0.00031,0.01660,0.00084,0.00039,0.00283,0.00276,0.00040,0.00068,0.00477,0.00026,0.00231,0.00014,0.00038,0.00152,0.00020,0.00030,0.00022,0.00052,0.00464,0.00088,0.00005,0.00079,0.00059,0.00132,0.00141,0.00020,0.00552,0.00029,0.00089,0.00039,0.00047,0.00082,0.00075,0.00103,0.00023,0.00024,0.00276,0.00544,0.00500,0.00044,0.00037,0.00037,0.00039,0.00046,0.00049,0.00169,0.00172,0.00047,0.00549,0.00013,0.00529,0.00037,0.00029,0.00491,0.00110,0.00044,0.00053,0.00029,0.00061,0.00063,0.00049,0.03772,0.04663,0.00141,0.01947,0.00847,0.01961,0.00082,0.00061,0.00050,0.00025,0.00049,0.01203,0.00045,0.03203,0.08613,0.00063,0.04246,0.00106,0.00061,0.02067,0.00025,0.03931,0.01608,0.00054,0.00203,0.00375,0.00011,0.00040,0.01469,0.00027,0.00039,0.01560,0.00041,0.00000,0.00039,0.00073,0.00443,0.00026,0.00149,0.00086,0.00036,0.00012,0.00064,0.00045,0.00036,0.00038,0.00376,0.00172,0.00319,0.00085,0.00499,0.00271,0.00064,0.00031,0.00071,0.00070,0.00153,0.00032,0.06199,0.00288,0.01122,0.00034,0.00009,0.00917,0.00477,0.01417,0.00143,0.00066,0.00048,0.00062,0.00056,0.00114,0.00731,0.00251,0.00039,0.00011,0.00107,0.00049,0.00200,0.00841,0.00037,0.00000,0.00087,0.00143,0.00190,0.00035,0.00012,0.00112,0.00242,0.00251,0.00486,0.00015,0.00091,0.00085,0.00088,0.00028,0.00068,0.00016,0.00020,0.00021,0.00636,0.00040,0.00009,0.00038,0.00006,0.00059,0.00478,0.00047,0.00029,0.00023,0.00022,0.00057,0.00017,0.00038,0.00546,0.00006,0.00009,0.00011,0.00061,0.00019,0.00006,0.00058,0.00175,0.00010,0.00008,0.00015,0.00012,0.00028,0.00059,0.03601,0.00271,0.00000,0.00080,0.00000,0.00062,0.01307,0.00034,0.00259,0.00042,0.00012,0.00101,0.00205,0.00051,0.00500,0.00065,0.00077,0.00027,0.00026,0.00086,0.00482,0.00081,0.00000,0.00036,0.00044,0.00501,0.00000,0.00009,0.00258,0.00228,0.00472,0.00037,0.00014,0.00007,0.00011,0.00012,0.00029,0.00072,0.00067,0.00024,0.00465,0.00066,0.00471,0.00018,0.00413,0.00000,0.00021,0.00054,0.00114,0.00071,0.00000,0.00050,0.00042,0.00027,0.00013,0.00045,0.00266,0.00028,0.00009,0.00014,0.00000,0.00008,0.00013,0.00010,0.00009,0.00014,0.00029,0.00025,0.00180,0.00171,0.00018};




std::pair<real,real>  mass_limits()
{
	real m1 = FLT_MAX;
	real m2 = -FLT_MAX;
	int numMass = std::min(massM.size(), sigmaM.size());

	for(int i =0 ; i< numMass;++i)
	{
		m1 = std::min(m1, massM[i] - 5 * sigmaM[i] );
		m2 = std::max(m2, massM[i] + 5 * sigmaM[i] );
	}

	return std::pair<real, real>(std::max(m1,0.0), m2);
}

real integrate_range(real x, real s, real x1, real x2)
{
	real w1 = 0.5*erf(0.707107 * (x1 - x) / s);
	real w2 = 0.5*erf(0.707107 * (x2 - x) / s);
	return (w2 - w1);

}

real gaussian_integrate_range(real x, real s, real x1, real x2)
{
	real w1 = 0.5*erf(0.707107 * (x1 - x) / s);
	real w2 = 0.5*erf(0.707107 * (x2 - x) / s);
	return (w2 - w1);

}


real integra_np(ModalParameter mp, const int modal_order, real u1, real u2)
{
	double uu;
	double result = 0.0;
	//if ((a + gg)>1) return 1e-40;
	if (modal_order >= 0) result += mp.p[0].a* gaussian_integrate_range(mp.p[0].x, mp.p[0].s, u1, u2);
	if (modal_order >= 1) result += mp.p[1].a* gaussian_integrate_range(mp.p[1].x, mp.p[1].s, u1, u2);
	if (modal_order >= 2) result += mp.p[2].a* gaussian_integrate_range(mp.p[2].x, mp.p[2].s, u1, u2);
	if (modal_order >= 3) result += mp.p[3].a* gaussian_integrate_range(mp.p[3].x, mp.p[3].s, u1, u2); 

	return 1e-20 + result;
}

void makeHistogram(  const int numMass, std::vector<double>& mass_h, std::vector<double>& count_h )
{
	int num_h = mass_h.size() - 1; 
	for (int j = 0; j < numMass; ++j)
	{
		for (int i = 0; i < num_h; ++i)
		{
			real n = integrate_range(massM[j], sigmaM[j], mass_h[i], mass_h[i + 1]);
			count_h[i] += n;
		}
	}

	real acc = 0.0;
	for (int k = 0; k < num_h - 1; ++k) acc += count_h[k];
	for (int k = 0; k < num_h - 1; ++k)
	{
		count_h[k] = count_h[k] / acc;		
	}


}




void compute_using_samples(cl::Context context , cl::Program gpuProgram , std::vector<ModalParameter>& points,  int modalOrder, int numPoints,  std::vector<real> &output)
{

	static std::vector<double> mass_h;
	static std::vector<double> count_h;
	int num_h = 16;


	int arraySize = points.size();
	 
	int numMass = std::min(massM.size(), sigmaM.size());


	if (mass_h.size() == 0)
	{

		mass_h.resize(num_h, 0.0);
		count_h.resize(num_h, 0.0);

		std::pair<real, real> m12 = mass_limits();

		real dmh = (m12.second - m12.first) / num_h;

		for (int k = 0; k < num_h; ++k)
		{
			mass_h[k] = m12.first + k * dmh;
		}

		makeHistogram(numMass, mass_h, count_h);

		for (int k = 0; k < num_h - 1; ++k)
		{
			printf("%f %f \n", 0.5*(mass_h[k] + mass_h[k + 1]), count_h[k]);
		}

	}


 
	int numSamples = numMass;
	while (numSamples % 8 != 0)
	{
		massM.push_back(-1);
		sigmaM.push_back(-1);
		numSamples++;
	}


	cl::Buffer inputBuffer(queue, begin(points), end(points), true);
	cl::Buffer outputBuffer(queue, begin(output), end(output), false);


	cl::Buffer massBuffer(queue, begin(massM), end(massM), true);
	cl::Buffer sigmBuffer(queue, begin(sigmaM), end(sigmaM), true);

	cl::Kernel kernel(gpuProgram, "ModalLikehodList");

	cl::Event event;


	auto devices = context.getInfo<CL_CONTEXT_DEVICES>();
	// printf("number of devices %d\n", devices.size());

	queue.finish();
	//LikeHoodKernel( cl::EnqueueArgs(event, cl::NDRange(arraySize), cl::NDRange(actualWorkGroupSize)), inputABuffer, outputBuffer, numParams );

	kernel.setArg(0, inputBuffer);
	kernel.setArg(1, outputBuffer);
	kernel.setArg(2, numPoints);

	kernel.setArg(3, massBuffer);
	kernel.setArg(4, sigmBuffer);
	kernel.setArg(5, numMass);

	kernel.setArg(6, modalOrder);

	cl::Event evt;

	int actualWorkGroupSize = std::min(numPoints, maxWorkGroupSize);


	//cl_int err_run = queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(arraySize,numSamples), cl::NDRange(actualWorkGroupSize, actualWorkGroupSize));

	cl_int err_run = queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(arraySize ), cl::NullRange);

	if (err_run != CL_SUCCESS)
	{
		printf("erro on running %i\n", err_run);
		return;

	}
	queue.finish(); 
	cl::copy(queue, outputBuffer, begin(output), end(output)); 


	 bool has_to_print = false;
	 static  real lmax = -FLT_MAX;
	 static ModalParameter best_modal = ModalParameter();
	 static  ModalParameter best_modal_all = ModalParameter();
	 if (best_modal_all.result == 0) best_modal_all.result = -99999;
	for (int i = 0; i < numPoints; ++i)
	{
		if (output[i] > lmax )
		{
			points[i].result = output[i];
			lmax = output[i];
			best_modal = points[i];
			has_to_print = true;
		}
	}
	if (best_modal_all.result < best_modal.result)
	{
		best_modal_all = best_modal;
	}


	if (has_to_print)
	{
		printf("%g\n", lmax);
		double dist_acc = 0.0;
		for (int k = 0; k < num_h - 1; ++k)
		{
			real u = 0.5*(mass_h[k] + mass_h[k + 1]);
			real dnp = integra_np(best_modal, modalOrder, mass_h[k], mass_h[k + 1]);
			printf("%f %f %f \n", u, count_h[k], dnp);
			dist_acc += dnp;
		}
		printf("total dist = %f \n", dist_acc);

		for (int k = 0; k <= modalOrder; ++k)
		{
			printf("[%3f %3f %3f] ", best_modal.p[k].a, best_modal.p[k].x, best_modal.p[k].s);
		}
		printf("= %4f \n", best_modal.result);

		for (int k = 0; k <= modalOrder; ++k)
		{
			printf("[%3f %3f %3f] ", best_modal_all.p[k].a, best_modal_all.p[k].x, best_modal_all.p[k].s);
		}
		printf("= %4f \n", best_modal_all.result);
		printf("\n");
	}


}

 

void compute_using_histogram(cl::Context context, cl::Program gpuProgram, std::vector<ModalParameter>& points, int modalOrder, int numPoints, std::vector<real> &output)
{

	static std::vector<double> mass_h;
	static std::vector<double> count_h;
	int num_h = 16;

	int arraySize = points.size();
	int numMass = std::min(massM.size(), sigmaM.size());



	if (mass_h.size() == 0)
	{

		mass_h.resize(num_h, 0.0);
		count_h.resize(num_h, 0.0);

		std::pair<real, real> m12 = mass_limits();

		real dmh = (m12.second - m12.first) / num_h;

		for (int k = 0; k < num_h; ++k)
		{
			mass_h[k] = m12.first + k * dmh;
		}

		makeHistogram(numMass, mass_h, count_h);

		for (int k = 0; k < num_h - 1; ++k)
		{
			printf("%f %f \n", 0.5*(mass_h[k] + mass_h[k + 1]), count_h[k]);
		}

	}
	 

	cl::Buffer inputBuffer(queue, begin(points), end(points), true);
	cl::Buffer outputBuffer(queue, begin(output), end(output), false);


	cl::Buffer HmassBuffer(queue, begin(mass_h), end(mass_h), true);
	cl::Buffer HcountBuffer(queue, begin(count_h), end(count_h), true);

	cl::Kernel kernel(gpuProgram, "ModalLikehodList_h");

	cl::Event event;


	auto devices = context.getInfo<CL_CONTEXT_DEVICES>();
	// printf("number of devices %d\n", devices.size());


	//LikeHoodKernel( cl::EnqueueArgs(event, cl::NDRange(arraySize), cl::NDRange(actualWorkGroupSize)), inputABuffer, outputBuffer, numParams );

	kernel.setArg(0, inputBuffer);
	kernel.setArg(1, outputBuffer);
	kernel.setArg(2, numPoints);

	kernel.setArg(3, HmassBuffer);
	kernel.setArg(4, HcountBuffer);
	kernel.setArg(5, num_h);

	kernel.setArg(6, modalOrder);

	cl::Event evt;

	int actualWorkGroupSize = std::min(numPoints, maxWorkGroupSize);


	cl_int err_run = queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(arraySize), cl::NDRange(actualWorkGroupSize));
	if (err_run != CL_SUCCESS)
	{
		printf("erro on running %i\n", err_run);
		return;

	}
	queue.finish();
	cl::copy(queue, outputBuffer, begin(output), end(output));

	bool has_to_print = false;
	static real lmax = -FLT_MAX;
	static ModalParameter best_modal = ModalParameter();



	for (int i = 0; i < numPoints; ++i)
	{
		if (output[i] > lmax )
		{
			lmax = output[i];
			best_modal = points[i];
			has_to_print = true;
		}
	}


	
	if (has_to_print)
	{
		printf("%g\n", lmax);
		double dist_acc = 0.0;
		for (int k = 0; k < num_h - 1; ++k)
		{
			real u = 0.5*(mass_h[k] + mass_h[k + 1]);
			real dnp = integra_np(best_modal, modalOrder, mass_h[k], mass_h[k + 1]);
			printf("%f %f %f \n", u, count_h[k], dnp);
			dist_acc += dnp;
		}
		printf("total dist = %f \n",  dist_acc);

		for (int k = 0; k <= modalOrder; ++k)
		{
		  	printf("[%3f %3f %3f] ", best_modal.p[k].a, best_modal.p[k].x, best_modal.p[k].s);
		} 
	}


}




void computeParams_old(std::vector<ModalParameter>& points , int modalOrder)
{
	 

	 

	static cl::Context context = getContext();
	static cl::Program gpuProgram = build_Program(context,modalOrder);


 

	 

	auto LikeHoodKernel =
		cl::make_kernel<
			cl::Buffer&,
			cl::Buffer&,
			int
		>(gpuProgram, "ModalLikehodList");


	int numParams = points.size();
	int numMass = massM.size();
	if (sigmaM.size() != numMass)
	{
		//printf("Error on Number of massas %d %d \n" , massM.size() , sigmaM.size());
		numMass = std::min(massM.size(), sigmaM.size());
	}

	 
	


	if (numParams > maxWorkGroupSize)
	{
		while (points.size() % maxWorkGroupSize != 0)
		{
			points.emplace_back(ModalParameter());
		}
	}
	int actualWorkGroupSize = std::min(numParams, maxWorkGroupSize);

	int arraySize = points.size();
	//std::vector<double> output(numParams, 0xdeadbeef);
	std::vector<real> output(arraySize, 1e-99);
	cl::Buffer inputBuffer(queue, begin(points), end(points), true);
	cl::Buffer outputBuffer(queue, begin(output), end(output), false);


	cl::Buffer massBuffer(queue, begin(massM), end(massM), true);
	cl::Buffer countBuffer(queue, begin(sigmaM), end(sigmaM), true);

	cl::Kernel kernel(gpuProgram, "ModalLikehodList");

	cl::Event event;


	auto devices = context.getInfo<CL_CONTEXT_DEVICES>();
	// printf("number of devices %d\n", devices.size());


	//LikeHoodKernel( cl::EnqueueArgs(event, cl::NDRange(arraySize), cl::NDRange(actualWorkGroupSize)), inputABuffer, outputBuffer, numParams );

	kernel.setArg(0, inputBuffer);
	kernel.setArg(1, outputBuffer);
	kernel.setArg(2, numParams);

	kernel.setArg(3, massBuffer);
	kernel.setArg(4, countBuffer);
	kernel.setArg(5, numMass);

	kernel.setArg(6, modalOrder);

	cl::Event evt;
	cl_int err_run = queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(arraySize), cl::NDRange(actualWorkGroupSize));
	if (err_run != CL_SUCCESS)
	{
		printf("erro on running %i\n" ,err_run);
		return;

	}
	queue.finish();

	//auto devices = context.getInfo<CL_CONTEXT_DEVICES>();
	// cl:: CommandQueue queue =cl::CommandQueue(context, devices[0]);
	//cl::Kernel kernel(gpuProgram, "LikelihoodList");
	// queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(arraySize),  cl::NDRange(actualWorkGroupSize));

	cl::copy(queue, outputBuffer, begin(output), end(output));




	//queue.finish();

	real lmax = -FLT_MAX;
	ModalParameter best_modal;
	for (int i = 0; i < numParams; ++i)
	{
		if (output[i] > lmax && output[i] < 0)
		{
			lmax = output[i];
			best_modal = points[i];		 
		}


		double rr = output[i];
		for (int k = 0; k <= modalOrder; ++k)
		{
		// 	printf("[%3f %3f %3f] ", points[i].p[k].a, points[i].p[k].x, points[i].p[k].s);
		}
		// printf("%g\n", output[i]);

	   points[i].result = output[i];
	}

	 printf("%g\n", lmax);

	 while (points.size() > numParams) points.pop_back();

	return;
}


void computeParams(std::vector<ModalParameter>& points, int modalOrder)
{




	static cl::Context context = getContext();
	static cl::Program gpuProgram = build_Program(context, modalOrder );

	 

	int numParams = points.size();
	int numMass = massM.size();
	if (sigmaM.size() != numMass)
	{
		//printf("Error on Number of massas %d %d \n" , massM.size() , sigmaM.size());
		numMass = std::min(massM.size(), sigmaM.size());
	}

	 



	if (numParams > maxWorkGroupSize)
	{
		while (points.size() % maxWorkGroupSize != 0)
		{
			points.emplace_back(ModalParameter());
		}
	}
	int actualWorkGroupSize = std::min(numParams, maxWorkGroupSize);

	int arraySize = points.size();
	//std::vector<double> output(numParams, 0xdeadbeef);
	std::vector<real> output(arraySize, 1e-99);



	//compute_using_histogram(context, gpuProgram, points, modalOrder, numParams, output);
	compute_using_samples(context, gpuProgram, points, modalOrder, numParams, output);
  

	//auto devices = context.getInfo<CL_CONTEXT_DEVICES>();
	// cl:: CommandQueue queue =cl::CommandQueue(context, devices[0]);
	//cl::Kernel kernel(gpuProgram, "LikelihoodList");
	// queue.enqueueNDRangeKernel(kernel, cl::NullRange, cl::NDRange(arraySize),  cl::NDRange(actualWorkGroupSize));
	  

	real lmax = -FLT_MAX;
	ModalParameter best_modal;
	for (int i = 0; i < numParams; ++i)
	{
		if (output[i] > lmax && output[i] < 0)
		{
			lmax = output[i];
			best_modal = points[i];
		}


		double rr = output[i];
		for (int k = 0; k <= modalOrder; ++k)
		{
			// 	printf("[%3f %3f %3f] ", points[i].p[k].a, points[i].p[k].x, points[i].p[k].s);
		}
		// printf("%g\n", output[i]);

		points[i].result = output[i];
	}

	//printf("%g\n", lmax); 
	while (points.size() > numParams) points.pop_back();

	return;
}

